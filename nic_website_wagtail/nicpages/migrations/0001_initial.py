# Generated by Django 2.2.6 on 2019-10-18 09:17

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import nic_website_wagtail.nicpages.blocks
import wagtail.contrib.table_block.blocks
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0001_squashed_0021'),
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        ('wagtaildocs', '0010_document_file_hash'),
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('intro', wagtail.core.fields.RichTextField(blank=True)),
                ('body', wagtail.core.fields.StreamField([('h1', wagtail.core.blocks.CharBlock(icon='title')), ('h2', wagtail.core.blocks.CharBlock(icon='title')), ('h3', wagtail.core.blocks.CharBlock(icon='title')), ('h4', wagtail.core.blocks.CharBlock(icon='title')), ('h5', wagtail.core.blocks.CharBlock(icon='title')), ('centre_heading', nic_website_wagtail.nicpages.blocks.CentreAlignHeadingBlock()), ('headline', nic_website_wagtail.nicpages.blocks.HeadlineBlock()), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('video', nic_website_wagtail.nicpages.blocks.VideoBlock(icon='media')), ('home_video', nic_website_wagtail.nicpages.blocks.VideoBlock(icon='media'))], blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.core.fields.StreamField([('h2', wagtail.core.blocks.CharBlock(classname='title', icon='title')), ('h3', wagtail.core.blocks.CharBlock(classname='title', icon='title')), ('h4', wagtail.core.blocks.CharBlock(classname='title', icon='title')), ('intro', wagtail.core.blocks.RichTextBlock(icon='pilcrow')), ('paragraph', wagtail.core.blocks.RichTextBlock(icon='pilcrow')), ('aligned_image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('caption', wagtail.core.blocks.RichTextBlock()), ('alignment', nic_website_wagtail.nicpages.blocks.ImageFormatChoiceBlock())], icon='image', label='Aligned image')), ('pullquote', wagtail.core.blocks.StructBlock([('quote', wagtail.core.blocks.TextBlock('quote title')), ('attribution', wagtail.core.blocks.CharBlock())])), ('aligned_html', wagtail.core.blocks.StructBlock([('html', wagtail.core.blocks.RawHTMLBlock()), ('alignment', nic_website_wagtail.nicpages.blocks.HTMLAlignmentChoiceBlock())], icon='code', label='Raw HTML')), ('document', wagtail.documents.blocks.DocumentChooserBlock(icon='doc-full-inverse')), ('doc_with_preview', wagtail.core.blocks.StructBlock([('preview', wagtail.images.blocks.ImageChooserBlock()), ('doc', wagtail.documents.blocks.DocumentChooserBlock())]))])),
                ('date', models.DateField(verbose_name='Post date')),
                ('feed_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='NicPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.core.fields.StreamField([('h1', wagtail.core.blocks.CharBlock(icon='title')), ('h2', wagtail.core.blocks.CharBlock(icon='title')), ('h3', wagtail.core.blocks.CharBlock(icon='title')), ('h4', wagtail.core.blocks.CharBlock(icon='title')), ('h5', wagtail.core.blocks.CharBlock(icon='title')), ('headline', nic_website_wagtail.nicpages.blocks.HeadlineBlock()), ('centre_heading', nic_website_wagtail.nicpages.blocks.CentreAlignHeadingBlock()), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('image_responsive', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock())])), ('doc_with_preview', wagtail.core.blocks.StructBlock([('preview', wagtail.images.blocks.ImageChooserBlock()), ('doc', wagtail.documents.blocks.DocumentChooserBlock())])), ('home_video', nic_website_wagtail.nicpages.blocks.HomePageVideoBlock(icon='media')), ('equipment_banner_row', wagtail.core.blocks.StructBlock([('first_image', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('page', wagtail.core.blocks.PageChooserBlock(required=False)), ('external_link', wagtail.core.blocks.URLBlock(required=False))])), ('second_image', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('page', wagtail.core.blocks.PageChooserBlock(required=False)), ('external_link', wagtail.core.blocks.URLBlock(required=False))]))])), ('google_map', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('street', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('postcode', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('city', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('map_long', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('map_lat', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('map_zoom_level', wagtail.core.blocks.CharBlock(default=14, max_length=3, required=True)), ('width', wagtail.core.blocks.IntegerBlock(required=True)), ('height', wagtail.core.blocks.IntegerBlock(required=True))])), ('two_columns', wagtail.core.blocks.StructBlock([('left_column', wagtail.core.blocks.StreamBlock([('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('embedded_video', wagtail.embeds.blocks.EmbedBlock()), ('google_map', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('street', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('postcode', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('city', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('map_long', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('map_lat', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('map_zoom_level', wagtail.core.blocks.CharBlock(default=14, max_length=3, required=True)), ('width', wagtail.core.blocks.IntegerBlock(required=True)), ('height', wagtail.core.blocks.IntegerBlock(required=True))]))], icon='arrow-left', label='Left column content')), ('right_column', wagtail.core.blocks.StreamBlock([('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('embedded_video', wagtail.embeds.blocks.EmbedBlock()), ('google_map', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('street', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('postcode', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('city', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('map_long', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('map_lat', wagtail.core.blocks.CharBlock(max_length=255, required=True)), ('map_zoom_level', wagtail.core.blocks.CharBlock(default=14, max_length=3, required=True)), ('width', wagtail.core.blocks.IntegerBlock(required=True)), ('height', wagtail.core.blocks.IntegerBlock(required=True))]))], icon='arrow-right', label='Right column content'))])), ('image_gallery', wagtail.core.blocks.StreamBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('caption', wagtail.core.blocks.CharBlock())])), ('table', wagtail.contrib.table_block.blocks.TableBlock(table_options={'colHeaders': True, 'editor': 'text', 'rowHeaders': False, 'stretchH': 'all'}))], blank=True, null=True)),
                ('main_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='nicpages.BlogPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nicpages_blogpagetag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlogPageRelatedLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('link_external', models.URLField(blank=True, verbose_name='External link')),
                ('title', models.CharField(help_text='Link title', max_length=255)),
                ('link_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document')),
                ('link_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_links', to='nicpages.BlogPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlogPageCarouselItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('link_external', models.URLField(blank=True, verbose_name='External link')),
                ('embed_url', models.URLField(blank=True, verbose_name='Embed URL')),
                ('caption', models.CharField(blank=True, max_length=255)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('link_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document')),
                ('link_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='carousel_items', to='nicpages.BlogPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='nicpages.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='BlogIndexPageRelatedLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('link_external', models.URLField(blank=True, verbose_name='External link')),
                ('title', models.CharField(help_text='Link title', max_length=255)),
                ('link_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document')),
                ('link_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_links', to='nicpages.BlogIndexPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
